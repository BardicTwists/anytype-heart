// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/anytype-heart/pkg/lib/localstore/objectstore (interfaces: ObjectStore)
//
// Generated by this command:
//
//	mockgen -package testMock -destination objectstore_mock.go github.com/anyproto/anytype-heart/pkg/lib/localstore/objectstore ObjectStore
//

// Package testMock is a generated GoMock package.
package testMock

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	coordinatorproto "github.com/anyproto/any-sync/coordinator/coordinatorproto"
	database "github.com/anyproto/anytype-heart/pkg/lib/database"
	spaceobjects "github.com/anyproto/anytype-heart/pkg/lib/localstore/objectstore/spaceobjects"
	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectStore is a mock of ObjectStore interface.
type MockObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMockRecorder
}

// MockObjectStoreMockRecorder is the mock recorder for MockObjectStore.
type MockObjectStoreMockRecorder struct {
	mock *MockObjectStore
}

// NewMockObjectStore creates a new mock instance.
func NewMockObjectStore(ctrl *gomock.Controller) *MockObjectStore {
	mock := &MockObjectStore{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStore) EXPECT() *MockObjectStoreMockRecorder {
	return m.recorder
}

// AddToIndexQueue mocks base method.
func (m *MockObjectStore) AddToIndexQueue(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToIndexQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToIndexQueue indicates an expected call of AddToIndexQueue.
func (mr *MockObjectStoreMockRecorder) AddToIndexQueue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToIndexQueue", reflect.TypeOf((*MockObjectStore)(nil).AddToIndexQueue), arg0, arg1)
}

// BatchProcessFullTextQueue mocks base method.
func (m *MockObjectStore) BatchProcessFullTextQueue(arg0 context.Context, arg1 int, arg2 func([]string) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchProcessFullTextQueue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchProcessFullTextQueue indicates an expected call of BatchProcessFullTextQueue.
func (mr *MockObjectStoreMockRecorder) BatchProcessFullTextQueue(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchProcessFullTextQueue", reflect.TypeOf((*MockObjectStore)(nil).BatchProcessFullTextQueue), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockObjectStore) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockObjectStoreMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockObjectStore)(nil).Close), arg0)
}

// DeleteVirtualSpace mocks base method.
func (m *MockObjectStore) DeleteVirtualSpace(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualSpace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualSpace indicates an expected call of DeleteVirtualSpace.
func (mr *MockObjectStoreMockRecorder) DeleteVirtualSpace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualSpace", reflect.TypeOf((*MockObjectStore)(nil).DeleteVirtualSpace), arg0)
}

// GetAccountStatus mocks base method.
func (m *MockObjectStore) GetAccountStatus() (*coordinatorproto.SpaceStatusPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountStatus")
	ret0, _ := ret[0].(*coordinatorproto.SpaceStatusPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountStatus indicates an expected call of GetAccountStatus.
func (mr *MockObjectStoreMockRecorder) GetAccountStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountStatus", reflect.TypeOf((*MockObjectStore)(nil).GetAccountStatus))
}

// GetChecksums mocks base method.
func (m *MockObjectStore) GetChecksums(arg0 string) (*model.ObjectStoreChecksums, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChecksums", arg0)
	ret0, _ := ret[0].(*model.ObjectStoreChecksums)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChecksums indicates an expected call of GetChecksums.
func (mr *MockObjectStoreMockRecorder) GetChecksums(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecksums", reflect.TypeOf((*MockObjectStore)(nil).GetChecksums), arg0)
}

// GetGlobalChecksums mocks base method.
func (m *MockObjectStore) GetGlobalChecksums() (*model.ObjectStoreChecksums, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalChecksums")
	ret0, _ := ret[0].(*model.ObjectStoreChecksums)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalChecksums indicates an expected call of GetGlobalChecksums.
func (mr *MockObjectStoreMockRecorder) GetGlobalChecksums() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalChecksums", reflect.TypeOf((*MockObjectStore)(nil).GetGlobalChecksums))
}

// GetSpaceName mocks base method.
func (m *MockObjectStore) GetSpaceName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSpaceName indicates an expected call of GetSpaceName.
func (mr *MockObjectStoreMockRecorder) GetSpaceName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceName", reflect.TypeOf((*MockObjectStore)(nil).GetSpaceName), arg0)
}

// Init mocks base method.
func (m *MockObjectStore) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockObjectStoreMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockObjectStore)(nil).Init), arg0)
}

// ListIDsFromFullTextQueue mocks base method.
func (m *MockObjectStore) ListIDsFromFullTextQueue(arg0 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIDsFromFullTextQueue", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIDsFromFullTextQueue indicates an expected call of ListIDsFromFullTextQueue.
func (mr *MockObjectStoreMockRecorder) ListIDsFromFullTextQueue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIDsFromFullTextQueue", reflect.TypeOf((*MockObjectStore)(nil).ListIDsFromFullTextQueue), arg0)
}

// ListIdsCrossSpace mocks base method.
func (m *MockObjectStore) ListIdsCrossSpace() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdsCrossSpace")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdsCrossSpace indicates an expected call of ListIdsCrossSpace.
func (mr *MockObjectStoreMockRecorder) ListIdsCrossSpace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdsCrossSpace", reflect.TypeOf((*MockObjectStore)(nil).ListIdsCrossSpace))
}

// ListVirtualSpaces mocks base method.
func (m *MockObjectStore) ListVirtualSpaces() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualSpaces")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualSpaces indicates an expected call of ListVirtualSpaces.
func (mr *MockObjectStoreMockRecorder) ListVirtualSpaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualSpaces", reflect.TypeOf((*MockObjectStore)(nil).ListVirtualSpaces))
}

// Name mocks base method.
func (m *MockObjectStore) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockObjectStoreMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockObjectStore)(nil).Name))
}

// QueryByIdCrossSpace mocks base method.
func (m *MockObjectStore) QueryByIdCrossSpace(arg0 []string) ([]database.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByIdCrossSpace", arg0)
	ret0, _ := ret[0].([]database.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByIdCrossSpace indicates an expected call of QueryByIdCrossSpace.
func (mr *MockObjectStoreMockRecorder) QueryByIdCrossSpace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByIdCrossSpace", reflect.TypeOf((*MockObjectStore)(nil).QueryByIdCrossSpace), arg0)
}

// QueryCrossSpace mocks base method.
func (m *MockObjectStore) QueryCrossSpace(arg0 database.Query) ([]database.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCrossSpace", arg0)
	ret0, _ := ret[0].([]database.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCrossSpace indicates an expected call of QueryCrossSpace.
func (mr *MockObjectStoreMockRecorder) QueryCrossSpace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCrossSpace", reflect.TypeOf((*MockObjectStore)(nil).QueryCrossSpace), arg0)
}

// QueryRawCrossSpace mocks base method.
func (m *MockObjectStore) QueryRawCrossSpace(arg0 *database.Filters, arg1, arg2 int) ([]database.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRawCrossSpace", arg0, arg1, arg2)
	ret0, _ := ret[0].([]database.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRawCrossSpace indicates an expected call of QueryRawCrossSpace.
func (mr *MockObjectStoreMockRecorder) QueryRawCrossSpace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRawCrossSpace", reflect.TypeOf((*MockObjectStore)(nil).QueryRawCrossSpace), arg0, arg1, arg2)
}

// RemoveIDsFromFullTextQueue mocks base method.
func (m *MockObjectStore) RemoveIDsFromFullTextQueue(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIDsFromFullTextQueue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveIDsFromFullTextQueue indicates an expected call of RemoveIDsFromFullTextQueue.
func (mr *MockObjectStoreMockRecorder) RemoveIDsFromFullTextQueue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIDsFromFullTextQueue", reflect.TypeOf((*MockObjectStore)(nil).RemoveIDsFromFullTextQueue), arg0)
}

// Run mocks base method.
func (m *MockObjectStore) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockObjectStoreMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockObjectStore)(nil).Run), arg0)
}

// SaveAccountStatus mocks base method.
func (m *MockObjectStore) SaveAccountStatus(arg0 *coordinatorproto.SpaceStatusPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccountStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccountStatus indicates an expected call of SaveAccountStatus.
func (mr *MockObjectStoreMockRecorder) SaveAccountStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccountStatus", reflect.TypeOf((*MockObjectStore)(nil).SaveAccountStatus), arg0)
}

// SaveChecksums mocks base method.
func (m *MockObjectStore) SaveChecksums(arg0 string, arg1 *model.ObjectStoreChecksums) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChecksums", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveChecksums indicates an expected call of SaveChecksums.
func (mr *MockObjectStoreMockRecorder) SaveChecksums(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChecksums", reflect.TypeOf((*MockObjectStore)(nil).SaveChecksums), arg0, arg1)
}

// SaveVirtualSpace mocks base method.
func (m *MockObjectStore) SaveVirtualSpace(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVirtualSpace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVirtualSpace indicates an expected call of SaveVirtualSpace.
func (mr *MockObjectStoreMockRecorder) SaveVirtualSpace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVirtualSpace", reflect.TypeOf((*MockObjectStore)(nil).SaveVirtualSpace), arg0)
}

// SpaceId mocks base method.
func (m *MockObjectStore) SpaceId(arg0 string) spaceobjects.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceId", arg0)
	ret0, _ := ret[0].(spaceobjects.Store)
	return ret0
}

// SpaceId indicates an expected call of SpaceId.
func (mr *MockObjectStoreMockRecorder) SpaceId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceId", reflect.TypeOf((*MockObjectStore)(nil).SpaceId), arg0)
}

// SubscribeForAll mocks base method.
func (m *MockObjectStore) SubscribeForAll(arg0 func(database.Record)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeForAll", arg0)
}

// SubscribeForAll indicates an expected call of SubscribeForAll.
func (mr *MockObjectStoreMockRecorder) SubscribeForAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeForAll", reflect.TypeOf((*MockObjectStore)(nil).SubscribeForAll), arg0)
}
