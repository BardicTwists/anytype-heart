// Code generated by mockery. DO NOT EDIT.

package mock_core

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockMiddlewareInternal is an autogenerated mock type for the MiddlewareInternal type
type MockMiddlewareInternal struct {
	mock.Mock
}

type MockMiddlewareInternal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMiddlewareInternal) EXPECT() *MockMiddlewareInternal_Expecter {
	return &MockMiddlewareInternal_Expecter{mock: &_m.Mock}
}

// GetAccountInfo provides a mock function with given fields: ctx
func (_m *MockMiddlewareInternal) GetAccountInfo(ctx context.Context) (*model.AccountInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountInfo")
	}

	var r0 *model.AccountInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.AccountInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.AccountInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMiddlewareInternal_GetAccountInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountInfo'
type MockMiddlewareInternal_GetAccountInfo_Call struct {
	*mock.Call
}

// GetAccountInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMiddlewareInternal_Expecter) GetAccountInfo(ctx interface{}) *MockMiddlewareInternal_GetAccountInfo_Call {
	return &MockMiddlewareInternal_GetAccountInfo_Call{Call: _e.mock.On("GetAccountInfo", ctx)}
}

func (_c *MockMiddlewareInternal_GetAccountInfo_Call) Run(run func(ctx context.Context)) *MockMiddlewareInternal_GetAccountInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMiddlewareInternal_GetAccountInfo_Call) Return(_a0 *model.AccountInfo, _a1 error) *MockMiddlewareInternal_GetAccountInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMiddlewareInternal_GetAccountInfo_Call) RunAndReturn(run func(context.Context) (*model.AccountInfo, error)) *MockMiddlewareInternal_GetAccountInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetApp provides a mock function with given fields:
func (_m *MockMiddlewareInternal) GetApp() *app.App {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *app.App
	if rf, ok := ret.Get(0).(func() *app.App); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app.App)
		}
	}

	return r0
}

// MockMiddlewareInternal_GetApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApp'
type MockMiddlewareInternal_GetApp_Call struct {
	*mock.Call
}

// GetApp is a helper method to define mock.On call
func (_e *MockMiddlewareInternal_Expecter) GetApp() *MockMiddlewareInternal_GetApp_Call {
	return &MockMiddlewareInternal_GetApp_Call{Call: _e.mock.On("GetApp")}
}

func (_c *MockMiddlewareInternal_GetApp_Call) Run(run func()) *MockMiddlewareInternal_GetApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMiddlewareInternal_GetApp_Call) Return(_a0 *app.App) *MockMiddlewareInternal_GetApp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMiddlewareInternal_GetApp_Call) RunAndReturn(run func() *app.App) *MockMiddlewareInternal_GetApp_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMiddlewareInternal creates a new instance of MockMiddlewareInternal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMiddlewareInternal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMiddlewareInternal {
	mock := &MockMiddlewareInternal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
