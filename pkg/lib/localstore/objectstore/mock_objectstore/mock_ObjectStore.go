// Code generated by mockery. DO NOT EDIT.

package mock_objectstore

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	coordinatorproto "github.com/anyproto/any-sync/coordinator/coordinatorproto"

	database "github.com/anyproto/anytype-heart/pkg/lib/database"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"

	spaceobjects "github.com/anyproto/anytype-heart/pkg/lib/localstore/objectstore/spaceobjects"
)

// MockObjectStore is an autogenerated mock type for the ObjectStore type
type MockObjectStore struct {
	mock.Mock
}

type MockObjectStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectStore) EXPECT() *MockObjectStore_Expecter {
	return &MockObjectStore_Expecter{mock: &_m.Mock}
}

// AddToIndexQueue provides a mock function with given fields: ctx, id
func (_m *MockObjectStore) AddToIndexQueue(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AddToIndexQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_AddToIndexQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToIndexQueue'
type MockObjectStore_AddToIndexQueue_Call struct {
	*mock.Call
}

// AddToIndexQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockObjectStore_Expecter) AddToIndexQueue(ctx interface{}, id interface{}) *MockObjectStore_AddToIndexQueue_Call {
	return &MockObjectStore_AddToIndexQueue_Call{Call: _e.mock.On("AddToIndexQueue", ctx, id)}
}

func (_c *MockObjectStore_AddToIndexQueue_Call) Run(run func(ctx context.Context, id string)) *MockObjectStore_AddToIndexQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockObjectStore_AddToIndexQueue_Call) Return(_a0 error) *MockObjectStore_AddToIndexQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_AddToIndexQueue_Call) RunAndReturn(run func(context.Context, string) error) *MockObjectStore_AddToIndexQueue_Call {
	_c.Call.Return(run)
	return _c
}

// BatchProcessFullTextQueue provides a mock function with given fields: ctx, limit, processIds
func (_m *MockObjectStore) BatchProcessFullTextQueue(ctx context.Context, limit int, processIds func([]string) error) error {
	ret := _m.Called(ctx, limit, processIds)

	if len(ret) == 0 {
		panic("no return value specified for BatchProcessFullTextQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, func([]string) error) error); ok {
		r0 = rf(ctx, limit, processIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_BatchProcessFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchProcessFullTextQueue'
type MockObjectStore_BatchProcessFullTextQueue_Call struct {
	*mock.Call
}

// BatchProcessFullTextQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - processIds func([]string) error
func (_e *MockObjectStore_Expecter) BatchProcessFullTextQueue(ctx interface{}, limit interface{}, processIds interface{}) *MockObjectStore_BatchProcessFullTextQueue_Call {
	return &MockObjectStore_BatchProcessFullTextQueue_Call{Call: _e.mock.On("BatchProcessFullTextQueue", ctx, limit, processIds)}
}

func (_c *MockObjectStore_BatchProcessFullTextQueue_Call) Run(run func(ctx context.Context, limit int, processIds func([]string) error)) *MockObjectStore_BatchProcessFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(func([]string) error))
	})
	return _c
}

func (_c *MockObjectStore_BatchProcessFullTextQueue_Call) Return(_a0 error) *MockObjectStore_BatchProcessFullTextQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_BatchProcessFullTextQueue_Call) RunAndReturn(run func(context.Context, int, func([]string) error) error) *MockObjectStore_BatchProcessFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *MockObjectStore) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockObjectStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObjectStore_Expecter) Close(ctx interface{}) *MockObjectStore_Close_Call {
	return &MockObjectStore_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockObjectStore_Close_Call) Run(run func(ctx context.Context)) *MockObjectStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockObjectStore_Close_Call) Return(err error) *MockObjectStore_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_Close_Call) RunAndReturn(run func(context.Context) error) *MockObjectStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVirtualSpace provides a mock function with given fields: spaceID
func (_m *MockObjectStore) DeleteVirtualSpace(spaceID string) error {
	ret := _m.Called(spaceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVirtualSpace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(spaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_DeleteVirtualSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVirtualSpace'
type MockObjectStore_DeleteVirtualSpace_Call struct {
	*mock.Call
}

// DeleteVirtualSpace is a helper method to define mock.On call
//   - spaceID string
func (_e *MockObjectStore_Expecter) DeleteVirtualSpace(spaceID interface{}) *MockObjectStore_DeleteVirtualSpace_Call {
	return &MockObjectStore_DeleteVirtualSpace_Call{Call: _e.mock.On("DeleteVirtualSpace", spaceID)}
}

func (_c *MockObjectStore_DeleteVirtualSpace_Call) Run(run func(spaceID string)) *MockObjectStore_DeleteVirtualSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_DeleteVirtualSpace_Call) Return(_a0 error) *MockObjectStore_DeleteVirtualSpace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_DeleteVirtualSpace_Call) RunAndReturn(run func(string) error) *MockObjectStore_DeleteVirtualSpace_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountStatus provides a mock function with given fields:
func (_m *MockObjectStore) GetAccountStatus() (*coordinatorproto.SpaceStatusPayload, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccountStatus")
	}

	var r0 *coordinatorproto.SpaceStatusPayload
	var r1 error
	if rf, ok := ret.Get(0).(func() (*coordinatorproto.SpaceStatusPayload, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *coordinatorproto.SpaceStatusPayload); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorproto.SpaceStatusPayload)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetAccountStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountStatus'
type MockObjectStore_GetAccountStatus_Call struct {
	*mock.Call
}

// GetAccountStatus is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) GetAccountStatus() *MockObjectStore_GetAccountStatus_Call {
	return &MockObjectStore_GetAccountStatus_Call{Call: _e.mock.On("GetAccountStatus")}
}

func (_c *MockObjectStore_GetAccountStatus_Call) Run(run func()) *MockObjectStore_GetAccountStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_GetAccountStatus_Call) Return(status *coordinatorproto.SpaceStatusPayload, err error) *MockObjectStore_GetAccountStatus_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockObjectStore_GetAccountStatus_Call) RunAndReturn(run func() (*coordinatorproto.SpaceStatusPayload, error)) *MockObjectStore_GetAccountStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetChecksums provides a mock function with given fields: spaceID
func (_m *MockObjectStore) GetChecksums(spaceID string) (*model.ObjectStoreChecksums, error) {
	ret := _m.Called(spaceID)

	if len(ret) == 0 {
		panic("no return value specified for GetChecksums")
	}

	var r0 *model.ObjectStoreChecksums
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ObjectStoreChecksums, error)); ok {
		return rf(spaceID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ObjectStoreChecksums); ok {
		r0 = rf(spaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectStoreChecksums)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(spaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksums'
type MockObjectStore_GetChecksums_Call struct {
	*mock.Call
}

// GetChecksums is a helper method to define mock.On call
//   - spaceID string
func (_e *MockObjectStore_Expecter) GetChecksums(spaceID interface{}) *MockObjectStore_GetChecksums_Call {
	return &MockObjectStore_GetChecksums_Call{Call: _e.mock.On("GetChecksums", spaceID)}
}

func (_c *MockObjectStore_GetChecksums_Call) Run(run func(spaceID string)) *MockObjectStore_GetChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetChecksums_Call) Return(checksums *model.ObjectStoreChecksums, err error) *MockObjectStore_GetChecksums_Call {
	_c.Call.Return(checksums, err)
	return _c
}

func (_c *MockObjectStore_GetChecksums_Call) RunAndReturn(run func(string) (*model.ObjectStoreChecksums, error)) *MockObjectStore_GetChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalChecksums provides a mock function with given fields:
func (_m *MockObjectStore) GetGlobalChecksums() (*model.ObjectStoreChecksums, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalChecksums")
	}

	var r0 *model.ObjectStoreChecksums
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.ObjectStoreChecksums, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.ObjectStoreChecksums); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectStoreChecksums)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetGlobalChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalChecksums'
type MockObjectStore_GetGlobalChecksums_Call struct {
	*mock.Call
}

// GetGlobalChecksums is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) GetGlobalChecksums() *MockObjectStore_GetGlobalChecksums_Call {
	return &MockObjectStore_GetGlobalChecksums_Call{Call: _e.mock.On("GetGlobalChecksums")}
}

func (_c *MockObjectStore_GetGlobalChecksums_Call) Run(run func()) *MockObjectStore_GetGlobalChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_GetGlobalChecksums_Call) Return(checksums *model.ObjectStoreChecksums, err error) *MockObjectStore_GetGlobalChecksums_Call {
	_c.Call.Return(checksums, err)
	return _c
}

func (_c *MockObjectStore_GetGlobalChecksums_Call) RunAndReturn(run func() (*model.ObjectStoreChecksums, error)) *MockObjectStore_GetGlobalChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpaceName provides a mock function with given fields: spaceId
func (_m *MockObjectStore) GetSpaceName(spaceId string) string {
	ret := _m.Called(spaceId)

	if len(ret) == 0 {
		panic("no return value specified for GetSpaceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(spaceId)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockObjectStore_GetSpaceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpaceName'
type MockObjectStore_GetSpaceName_Call struct {
	*mock.Call
}

// GetSpaceName is a helper method to define mock.On call
//   - spaceId string
func (_e *MockObjectStore_Expecter) GetSpaceName(spaceId interface{}) *MockObjectStore_GetSpaceName_Call {
	return &MockObjectStore_GetSpaceName_Call{Call: _e.mock.On("GetSpaceName", spaceId)}
}

func (_c *MockObjectStore_GetSpaceName_Call) Run(run func(spaceId string)) *MockObjectStore_GetSpaceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetSpaceName_Call) Return(_a0 string) *MockObjectStore_GetSpaceName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_GetSpaceName_Call) RunAndReturn(run func(string) string) *MockObjectStore_GetSpaceName_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockObjectStore) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockObjectStore_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockObjectStore_Expecter) Init(a interface{}) *MockObjectStore_Init_Call {
	return &MockObjectStore_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockObjectStore_Init_Call) Run(run func(a *app.App)) *MockObjectStore_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockObjectStore_Init_Call) Return(err error) *MockObjectStore_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_Init_Call) RunAndReturn(run func(*app.App) error) *MockObjectStore_Init_Call {
	_c.Call.Return(run)
	return _c
}

// ListIDsFromFullTextQueue provides a mock function with given fields: limit
func (_m *MockObjectStore) ListIDsFromFullTextQueue(limit int) ([]string, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for ListIDsFromFullTextQueue")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]string, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListIDsFromFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIDsFromFullTextQueue'
type MockObjectStore_ListIDsFromFullTextQueue_Call struct {
	*mock.Call
}

// ListIDsFromFullTextQueue is a helper method to define mock.On call
//   - limit int
func (_e *MockObjectStore_Expecter) ListIDsFromFullTextQueue(limit interface{}) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	return &MockObjectStore_ListIDsFromFullTextQueue_Call{Call: _e.mock.On("ListIDsFromFullTextQueue", limit)}
}

func (_c *MockObjectStore_ListIDsFromFullTextQueue_Call) Run(run func(limit int)) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockObjectStore_ListIDsFromFullTextQueue_Call) Return(_a0 []string, _a1 error) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_ListIDsFromFullTextQueue_Call) RunAndReturn(run func(int) ([]string, error)) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// ListIdsCrossSpace provides a mock function with given fields:
func (_m *MockObjectStore) ListIdsCrossSpace() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListIdsCrossSpace")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListIdsCrossSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIdsCrossSpace'
type MockObjectStore_ListIdsCrossSpace_Call struct {
	*mock.Call
}

// ListIdsCrossSpace is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) ListIdsCrossSpace() *MockObjectStore_ListIdsCrossSpace_Call {
	return &MockObjectStore_ListIdsCrossSpace_Call{Call: _e.mock.On("ListIdsCrossSpace")}
}

func (_c *MockObjectStore_ListIdsCrossSpace_Call) Run(run func()) *MockObjectStore_ListIdsCrossSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_ListIdsCrossSpace_Call) Return(_a0 []string, _a1 error) *MockObjectStore_ListIdsCrossSpace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_ListIdsCrossSpace_Call) RunAndReturn(run func() ([]string, error)) *MockObjectStore_ListIdsCrossSpace_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtualSpaces provides a mock function with given fields:
func (_m *MockObjectStore) ListVirtualSpaces() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListVirtualSpaces")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListVirtualSpaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtualSpaces'
type MockObjectStore_ListVirtualSpaces_Call struct {
	*mock.Call
}

// ListVirtualSpaces is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) ListVirtualSpaces() *MockObjectStore_ListVirtualSpaces_Call {
	return &MockObjectStore_ListVirtualSpaces_Call{Call: _e.mock.On("ListVirtualSpaces")}
}

func (_c *MockObjectStore_ListVirtualSpaces_Call) Run(run func()) *MockObjectStore_ListVirtualSpaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_ListVirtualSpaces_Call) Return(_a0 []string, _a1 error) *MockObjectStore_ListVirtualSpaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_ListVirtualSpaces_Call) RunAndReturn(run func() ([]string, error)) *MockObjectStore_ListVirtualSpaces_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockObjectStore) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockObjectStore_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockObjectStore_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) Name() *MockObjectStore_Name_Call {
	return &MockObjectStore_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockObjectStore_Name_Call) Run(run func()) *MockObjectStore_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_Name_Call) Return(name string) *MockObjectStore_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockObjectStore_Name_Call) RunAndReturn(run func() string) *MockObjectStore_Name_Call {
	_c.Call.Return(run)
	return _c
}

// QueryByIdCrossSpace provides a mock function with given fields: ids
func (_m *MockObjectStore) QueryByIdCrossSpace(ids []string) ([]database.Record, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for QueryByIdCrossSpace")
	}

	var r0 []database.Record
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]database.Record, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []database.Record); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_QueryByIdCrossSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByIdCrossSpace'
type MockObjectStore_QueryByIdCrossSpace_Call struct {
	*mock.Call
}

// QueryByIdCrossSpace is a helper method to define mock.On call
//   - ids []string
func (_e *MockObjectStore_Expecter) QueryByIdCrossSpace(ids interface{}) *MockObjectStore_QueryByIdCrossSpace_Call {
	return &MockObjectStore_QueryByIdCrossSpace_Call{Call: _e.mock.On("QueryByIdCrossSpace", ids)}
}

func (_c *MockObjectStore_QueryByIdCrossSpace_Call) Run(run func(ids []string)) *MockObjectStore_QueryByIdCrossSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockObjectStore_QueryByIdCrossSpace_Call) Return(records []database.Record, err error) *MockObjectStore_QueryByIdCrossSpace_Call {
	_c.Call.Return(records, err)
	return _c
}

func (_c *MockObjectStore_QueryByIdCrossSpace_Call) RunAndReturn(run func([]string) ([]database.Record, error)) *MockObjectStore_QueryByIdCrossSpace_Call {
	_c.Call.Return(run)
	return _c
}

// QueryCrossSpace provides a mock function with given fields: q
func (_m *MockObjectStore) QueryCrossSpace(q database.Query) ([]database.Record, error) {
	ret := _m.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for QueryCrossSpace")
	}

	var r0 []database.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(database.Query) ([]database.Record, error)); ok {
		return rf(q)
	}
	if rf, ok := ret.Get(0).(func(database.Query) []database.Record); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(database.Query) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_QueryCrossSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryCrossSpace'
type MockObjectStore_QueryCrossSpace_Call struct {
	*mock.Call
}

// QueryCrossSpace is a helper method to define mock.On call
//   - q database.Query
func (_e *MockObjectStore_Expecter) QueryCrossSpace(q interface{}) *MockObjectStore_QueryCrossSpace_Call {
	return &MockObjectStore_QueryCrossSpace_Call{Call: _e.mock.On("QueryCrossSpace", q)}
}

func (_c *MockObjectStore_QueryCrossSpace_Call) Run(run func(q database.Query)) *MockObjectStore_QueryCrossSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(database.Query))
	})
	return _c
}

func (_c *MockObjectStore_QueryCrossSpace_Call) Return(records []database.Record, err error) *MockObjectStore_QueryCrossSpace_Call {
	_c.Call.Return(records, err)
	return _c
}

func (_c *MockObjectStore_QueryCrossSpace_Call) RunAndReturn(run func(database.Query) ([]database.Record, error)) *MockObjectStore_QueryCrossSpace_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRawCrossSpace provides a mock function with given fields: f, limit, offset
func (_m *MockObjectStore) QueryRawCrossSpace(f *database.Filters, limit int, offset int) ([]database.Record, error) {
	ret := _m.Called(f, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for QueryRawCrossSpace")
	}

	var r0 []database.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(*database.Filters, int, int) ([]database.Record, error)); ok {
		return rf(f, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(*database.Filters, int, int) []database.Record); ok {
		r0 = rf(f, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(*database.Filters, int, int) error); ok {
		r1 = rf(f, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_QueryRawCrossSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRawCrossSpace'
type MockObjectStore_QueryRawCrossSpace_Call struct {
	*mock.Call
}

// QueryRawCrossSpace is a helper method to define mock.On call
//   - f *database.Filters
//   - limit int
//   - offset int
func (_e *MockObjectStore_Expecter) QueryRawCrossSpace(f interface{}, limit interface{}, offset interface{}) *MockObjectStore_QueryRawCrossSpace_Call {
	return &MockObjectStore_QueryRawCrossSpace_Call{Call: _e.mock.On("QueryRawCrossSpace", f, limit, offset)}
}

func (_c *MockObjectStore_QueryRawCrossSpace_Call) Run(run func(f *database.Filters, limit int, offset int)) *MockObjectStore_QueryRawCrossSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.Filters), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockObjectStore_QueryRawCrossSpace_Call) Return(records []database.Record, err error) *MockObjectStore_QueryRawCrossSpace_Call {
	_c.Call.Return(records, err)
	return _c
}

func (_c *MockObjectStore_QueryRawCrossSpace_Call) RunAndReturn(run func(*database.Filters, int, int) ([]database.Record, error)) *MockObjectStore_QueryRawCrossSpace_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIDsFromFullTextQueue provides a mock function with given fields: ids
func (_m *MockObjectStore) RemoveIDsFromFullTextQueue(ids []string) error {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIDsFromFullTextQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_RemoveIDsFromFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIDsFromFullTextQueue'
type MockObjectStore_RemoveIDsFromFullTextQueue_Call struct {
	*mock.Call
}

// RemoveIDsFromFullTextQueue is a helper method to define mock.On call
//   - ids []string
func (_e *MockObjectStore_Expecter) RemoveIDsFromFullTextQueue(ids interface{}) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	return &MockObjectStore_RemoveIDsFromFullTextQueue_Call{Call: _e.mock.On("RemoveIDsFromFullTextQueue", ids)}
}

func (_c *MockObjectStore_RemoveIDsFromFullTextQueue_Call) Run(run func(ids []string)) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockObjectStore_RemoveIDsFromFullTextQueue_Call) Return(_a0 error) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_RemoveIDsFromFullTextQueue_Call) RunAndReturn(run func([]string) error) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockObjectStore) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockObjectStore_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObjectStore_Expecter) Run(ctx interface{}) *MockObjectStore_Run_Call {
	return &MockObjectStore_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockObjectStore_Run_Call) Run(run func(ctx context.Context)) *MockObjectStore_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockObjectStore_Run_Call) Return(err error) *MockObjectStore_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_Run_Call) RunAndReturn(run func(context.Context) error) *MockObjectStore_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAccountStatus provides a mock function with given fields: status
func (_m *MockObjectStore) SaveAccountStatus(status *coordinatorproto.SpaceStatusPayload) error {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for SaveAccountStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*coordinatorproto.SpaceStatusPayload) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveAccountStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAccountStatus'
type MockObjectStore_SaveAccountStatus_Call struct {
	*mock.Call
}

// SaveAccountStatus is a helper method to define mock.On call
//   - status *coordinatorproto.SpaceStatusPayload
func (_e *MockObjectStore_Expecter) SaveAccountStatus(status interface{}) *MockObjectStore_SaveAccountStatus_Call {
	return &MockObjectStore_SaveAccountStatus_Call{Call: _e.mock.On("SaveAccountStatus", status)}
}

func (_c *MockObjectStore_SaveAccountStatus_Call) Run(run func(status *coordinatorproto.SpaceStatusPayload)) *MockObjectStore_SaveAccountStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*coordinatorproto.SpaceStatusPayload))
	})
	return _c
}

func (_c *MockObjectStore_SaveAccountStatus_Call) Return(err error) *MockObjectStore_SaveAccountStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_SaveAccountStatus_Call) RunAndReturn(run func(*coordinatorproto.SpaceStatusPayload) error) *MockObjectStore_SaveAccountStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SaveChecksums provides a mock function with given fields: spaceID, checksums
func (_m *MockObjectStore) SaveChecksums(spaceID string, checksums *model.ObjectStoreChecksums) error {
	ret := _m.Called(spaceID, checksums)

	if len(ret) == 0 {
		panic("no return value specified for SaveChecksums")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.ObjectStoreChecksums) error); ok {
		r0 = rf(spaceID, checksums)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveChecksums'
type MockObjectStore_SaveChecksums_Call struct {
	*mock.Call
}

// SaveChecksums is a helper method to define mock.On call
//   - spaceID string
//   - checksums *model.ObjectStoreChecksums
func (_e *MockObjectStore_Expecter) SaveChecksums(spaceID interface{}, checksums interface{}) *MockObjectStore_SaveChecksums_Call {
	return &MockObjectStore_SaveChecksums_Call{Call: _e.mock.On("SaveChecksums", spaceID, checksums)}
}

func (_c *MockObjectStore_SaveChecksums_Call) Run(run func(spaceID string, checksums *model.ObjectStoreChecksums)) *MockObjectStore_SaveChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.ObjectStoreChecksums))
	})
	return _c
}

func (_c *MockObjectStore_SaveChecksums_Call) Return(err error) *MockObjectStore_SaveChecksums_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_SaveChecksums_Call) RunAndReturn(run func(string, *model.ObjectStoreChecksums) error) *MockObjectStore_SaveChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// SaveVirtualSpace provides a mock function with given fields: id
func (_m *MockObjectStore) SaveVirtualSpace(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SaveVirtualSpace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveVirtualSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveVirtualSpace'
type MockObjectStore_SaveVirtualSpace_Call struct {
	*mock.Call
}

// SaveVirtualSpace is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) SaveVirtualSpace(id interface{}) *MockObjectStore_SaveVirtualSpace_Call {
	return &MockObjectStore_SaveVirtualSpace_Call{Call: _e.mock.On("SaveVirtualSpace", id)}
}

func (_c *MockObjectStore_SaveVirtualSpace_Call) Run(run func(id string)) *MockObjectStore_SaveVirtualSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_SaveVirtualSpace_Call) Return(_a0 error) *MockObjectStore_SaveVirtualSpace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_SaveVirtualSpace_Call) RunAndReturn(run func(string) error) *MockObjectStore_SaveVirtualSpace_Call {
	_c.Call.Return(run)
	return _c
}

// SpaceId provides a mock function with given fields: spaceId
func (_m *MockObjectStore) SpaceId(spaceId string) spaceobjects.Store {
	ret := _m.Called(spaceId)

	if len(ret) == 0 {
		panic("no return value specified for SpaceId")
	}

	var r0 spaceobjects.Store
	if rf, ok := ret.Get(0).(func(string) spaceobjects.Store); ok {
		r0 = rf(spaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spaceobjects.Store)
		}
	}

	return r0
}

// MockObjectStore_SpaceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpaceId'
type MockObjectStore_SpaceId_Call struct {
	*mock.Call
}

// SpaceId is a helper method to define mock.On call
//   - spaceId string
func (_e *MockObjectStore_Expecter) SpaceId(spaceId interface{}) *MockObjectStore_SpaceId_Call {
	return &MockObjectStore_SpaceId_Call{Call: _e.mock.On("SpaceId", spaceId)}
}

func (_c *MockObjectStore_SpaceId_Call) Run(run func(spaceId string)) *MockObjectStore_SpaceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_SpaceId_Call) Return(_a0 spaceobjects.Store) *MockObjectStore_SpaceId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_SpaceId_Call) RunAndReturn(run func(string) spaceobjects.Store) *MockObjectStore_SpaceId_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeForAll provides a mock function with given fields: callback
func (_m *MockObjectStore) SubscribeForAll(callback func(database.Record)) {
	_m.Called(callback)
}

// MockObjectStore_SubscribeForAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeForAll'
type MockObjectStore_SubscribeForAll_Call struct {
	*mock.Call
}

// SubscribeForAll is a helper method to define mock.On call
//   - callback func(database.Record)
func (_e *MockObjectStore_Expecter) SubscribeForAll(callback interface{}) *MockObjectStore_SubscribeForAll_Call {
	return &MockObjectStore_SubscribeForAll_Call{Call: _e.mock.On("SubscribeForAll", callback)}
}

func (_c *MockObjectStore_SubscribeForAll_Call) Run(run func(callback func(database.Record))) *MockObjectStore_SubscribeForAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(database.Record)))
	})
	return _c
}

func (_c *MockObjectStore_SubscribeForAll_Call) Return() *MockObjectStore_SubscribeForAll_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObjectStore_SubscribeForAll_Call) RunAndReturn(run func(func(database.Record))) *MockObjectStore_SubscribeForAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObjectStore creates a new instance of MockObjectStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectStore {
	mock := &MockObjectStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
